// Generated by CIRCT firtool-1.62.0
// external module CXXRTLTestbench

module PWM(
  input  clock,
         reset,
  output io_pmod1a1,
         io_pmod1a2,
         io_pmod1a3
);

  reg  [7:0]      rgbVecReg_0;
  reg  [7:0]      rgbVecReg_1;
  reg  [7:0]      rgbVecReg_2;
  reg  [11:0]     io_pmod1a1_cntReg;
  reg  [11:0]     io_pmod1a2_cntReg;
  reg  [11:0]     io_pmod1a3_cntReg;
  reg  [15:0]     rgbCounterReg;
  reg  [1:0]      elementIxReg;
  reg             incrementingReg;
  wire [3:0][7:0] _GEN = {{rgbVecReg_0}, {rgbVecReg_2}, {rgbVecReg_1}, {rgbVecReg_0}};
  wire [7:0]      _GEN_0 = _GEN[elementIxReg];
  wire            _GEN_1 = elementIxReg == 2'h1;
  wire            _GEN_2 = elementIxReg == 2'h2;
  wire            _GEN_3 = _GEN_0 != 8'hFF;
  wire [7:0]      _rgbVecReg_T = _GEN_0 + 8'h1;
  wire [7:0]      _rgbVecReg_T_2 = _GEN_0 - 8'h1;
  always @(posedge clock) begin
    if (reset) begin
      rgbVecReg_0 <= 8'hFF;
      rgbVecReg_1 <= 8'h0;
      rgbVecReg_2 <= 8'h0;
      io_pmod1a1_cntReg <= 12'h0;
      io_pmod1a2_cntReg <= 12'h0;
      io_pmod1a3_cntReg <= 12'h0;
      rgbCounterReg <= 16'h0;
      elementIxReg <= 2'h1;
      incrementingReg <= 1'h1;
    end
    else begin
      if (rgbCounterReg == 16'hB71A) begin
        if (incrementingReg) begin
          if (_GEN_3 & ~(|elementIxReg))
            rgbVecReg_0 <= _rgbVecReg_T;
          if (_GEN_3 & _GEN_1)
            rgbVecReg_1 <= _rgbVecReg_T;
          if (_GEN_3 & _GEN_2)
            rgbVecReg_2 <= _rgbVecReg_T;
          if (~_GEN_3) begin
            if (|elementIxReg)
              elementIxReg <= elementIxReg - 2'h1;
            else
              elementIxReg <= 2'h2;
          end
          incrementingReg <= _GEN_3 ^ ~incrementingReg;
        end
        else begin
          if ((|_GEN_0) & ~(|elementIxReg))
            rgbVecReg_0 <= _rgbVecReg_T_2;
          if ((|_GEN_0) & _GEN_1)
            rgbVecReg_1 <= _rgbVecReg_T_2;
          if ((|_GEN_0) & _GEN_2)
            rgbVecReg_2 <= _rgbVecReg_T_2;
          if (~(|_GEN_0)) begin
            if (|elementIxReg)
              elementIxReg <= elementIxReg - 2'h1;
            else
              elementIxReg <= 2'h2;
          end
          incrementingReg <= (|_GEN_0) ^ ~incrementingReg;
        end
        rgbCounterReg <= 16'h0;
      end
      else
        rgbCounterReg <= rgbCounterReg + 16'h1;
      if (io_pmod1a1_cntReg == 12'hB70)
        io_pmod1a1_cntReg <= 12'h0;
      else
        io_pmod1a1_cntReg <= io_pmod1a1_cntReg + 12'h1;
      if (io_pmod1a2_cntReg == 12'hB70)
        io_pmod1a2_cntReg <= 12'h0;
      else
        io_pmod1a2_cntReg <= io_pmod1a2_cntReg + 12'h1;
      if (io_pmod1a3_cntReg == 12'hB70)
        io_pmod1a3_cntReg <= 12'h0;
      else
        io_pmod1a3_cntReg <= io_pmod1a3_cntReg + 12'h1;
    end
  end // always @(posedge)
  assign io_pmod1a1 = {1'h0, {3'h0, rgbVecReg_0} * 11'h5} > io_pmod1a1_cntReg;
  assign io_pmod1a2 = {1'h0, {3'h0, rgbVecReg_1} * 11'h5} > io_pmod1a2_cntReg;
  assign io_pmod1a3 = {1'h0, {3'h0, rgbVecReg_2} * 11'h5} > io_pmod1a3_cntReg;
endmodule

module Blinker(
  input  clock,
         reset,
  output io_ledr
);

  reg         ledReg;
  reg  [22:0] timerReg;
  wire        _GEN = timerReg == 23'h0;
  always @(posedge clock) begin
    if (reset) begin
      ledReg <= 1'h1;
      timerReg <= 23'h2DC6BF;
    end
    else begin
      ledReg <= _GEN ^ ledReg;
      if (_GEN)
        timerReg <= 23'h5B8D7F;
      else
        timerReg <= timerReg - 23'h1;
    end
  end // always @(posedge)
  assign io_ledr = ledReg;
endmodule

module Top(
  input  clock,
         reset,
         io_pins_rx,
  output io_pins_tx,
         io_ledr,
         io_pwm_pmod1a1,
         io_pwm_pmod1a2,
         io_pwm_pmod1a3
);

  CXXRTLTestbench bb (
    .clock (clock),
    .rx    (io_pins_rx),
    .tx    (io_pins_tx)
  );
  PWM pwm (
    .clock      (clock),
    .reset      (reset),
    .io_pmod1a1 (io_pwm_pmod1a1),
    .io_pmod1a2 (io_pwm_pmod1a2),
    .io_pmod1a3 (io_pwm_pmod1a3)
  );
  Blinker blinker (
    .clock   (clock),
    .reset   (reset),
    .io_ledr (io_ledr)
  );
endmodule

module top(
  input  clock,
         reset,
         io_pins_rx,
  output io_pins_tx,
         io_ledr,
         io_ledg,
         io_pwm_pmod1a1,
         io_pwm_pmod1a2,
         io_pwm_pmod1a3
);

  Top top (
    .clock          (clock),
    .reset          (reset),
    .io_pins_rx     (io_pins_rx),
    .io_pins_tx     (io_pins_tx),
    .io_ledr        (io_ledr),
    .io_pwm_pmod1a1 (io_pwm_pmod1a1),
    .io_pwm_pmod1a2 (io_pwm_pmod1a2),
    .io_pwm_pmod1a3 (io_pwm_pmod1a3)
  );
  assign io_ledg = 1'h0;
endmodule

